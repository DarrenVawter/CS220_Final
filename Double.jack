class Double{

    static Array bitVal;
    static Array decVal;

    field int whole;
    field int decimal;

    function void init(){

        //0 --> 0
        let bitVal = Array.new(16);
        let bitVal[0] = 1;
        let bitVal[1] = 2;
        let bitVal[2] = 4;
        let bitVal[3] = 8;
        let bitVal[4] = 16;
        let bitVal[5] = 32;
        let bitVal[6] = 64;
        let bitVal[7] = 128;
        let bitVal[8] = 256;
        let bitVal[9] = 512;
        let bitVal[10] = 1024;
        let bitVal[11] = 2048;
        let bitVal[12] = 4096;
        let bitVal[13] = 8192;
        let bitVal[14] = 16384;
        let bitVal[15] = -1;//sign bit (not considered)

        //0 --> -1
        let decVal = Array.new(16);
        let decVal[0] = 5000;
        let decVal[1] = 2500;
        let decVal[2] = 1250;
        let decVal[3] = 625;
        let decVal[4] = 313;
        let decVal[5] = 156;
        let decVal[6] = 78;
        let decVal[7] = 39;
        let decVal[8] = 19;
        let decVal[9] = 10;
        let decVal[10] = 5;
        let decVal[11] = 2;
        let decVal[12] = 1;
        let decVal[13] = 1;
        let decVal[14] = 0;
        let decVal[15] = 0;

        return;

    }

    //constructor
    constructor Double new(){

        let whole = 0;
        let decimal = 0;
        return this;

    }

    //destructor
    method void dispose(){
        return;
    }

    //getters
    method int whole(){

        return whole;

    }
    method int decimal(){

        return decimal;

    }

    //set to 0
    method void zero(){

        let whole = 0;
        let decimal = 0;
        return;

    }

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~INT ARITHMETIC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    //add whole number to this double
    method void addInt(int a){

        let whole = whole + a;
        return;

    }

    //subtract whole number from this double
    method void subtractInt(int a){

            let whole = whole - a;
            return;

    }

    //multiply this double by an int
    method void multInt(int a){

        var int i;
        var int div;
        var int product;

        let product = 0;
        let div = 1;

        let i = 0;

        while(i<14){

            let div = div * 2;
            if(~(decimal&bitVal[i]=0)){
                let product = product + (a/div);
            }

            let i = i + 1;
        }

        let product = product + (a*whole);

        let whole = product;
        let decimal = 0;

        return;

/*
        var int i;
        var Double product;
        var bool neg;

        let product = Double.new();

        if(a<0){
            let neg = true;
            let a = (~a)+1;//2's compliment
        }else{
            let neg = false;
        }

        let i = 0;
        while(i<a){

            do product.addDouble(this);

            let i = i + 1;

        }

        let whole = product.whole();
        let decimal = product.decimal();

        if(neg){
            let whole = (~whole)+1;//2's compliment
        }

        return;
*/

    }

    //divide this double by an int
    method void divideInt(int divisor){

        var int activeDividend;
        var int quotient;
        var int i;
        var boolean negative;

        //dividing by 0...
        if(divisor=0){

            //just return max double value, I guess...
            let whole = 32767;
            let decimal = 32767;
            return;

        }

        let activeDividend = 0;

        //determine if the result should be negated
        if(whole<0 | decimal<0){
            let whole = ~whole + 1;//2's compliment
            let negative = true;
        }else{
            let negative = false;
        }
        if(divisor<0){
            let divisor = ~divisor + 1;//2's compliment
            let negative = ~negative;
        }

        //calculate whole number portion of quotient while tracking remainder
        let i = 14;
        while(~(i<0)){//loop through each whole numbers place (in binary) and perform division

            let activeDividend = activeDividend * 2;
            if(~((whole&bitVal[i])=0)){
                let activeDividend = activeDividend + 1;
            }

            if(~(activeDividend<divisor)){
                let activeDividend = activeDividend - divisor;
                let quotient = quotient + bitVal[i];
            }


            let i = i - 1;

        }

        //negate result if answer should be negative
        if(negative){
            let quotient = ~quotient + 1;//2's compliment
        }

        //assign quotient to whole and re-assign it to 0 for decimal use
        let whole = quotient;
        let quotient = 0;

        //calculate decimal portion of quotient using the tracked remainder from above
        let i = 0;
        while(i<14){//loop through each decimals place (in binary) and perform division

            let activeDividend = activeDividend * 2;
            if(~((decimal&decVal[i])=0)){
                let activeDividend = activeDividend + 1;
            }


            if(~(activeDividend<divisor)){
                let activeDividend = activeDividend - divisor;
                let quotient = quotient + bitVal[i];
            }


            let i = i + 1;

        }

        //negate result if answer should be negative
        if(negative){
            let quotient = ~quotient + 1;//2's compliment
        }

        //assign decimal portion -> done
        let decimal = quotient;

        return;

    }

/*~~~~~~~~~~~~~~~~~~~~~~~~~DOUBLE ARITHMETIC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    //add another double to this double
    method void addDouble(Double other){

        var int decimalTotal;
        var int i;

        //originate decimal count to .0000
        let decimalTotal = 0;

        //add decimal values of binary decimals together
        let i = 0;
        while(i<14){

            //add this decimal to total decimal
                //check if it is a positive or negative number
            if(decimal>0){
                if(~((decimal&bitVal[i])=0)){
                    let decimalTotal = decimalTotal + decVal[i];
                }
            }else{
                if(~((decimal&bitVal[i])=0)){
                    let decimalTotal = decimalTotal - decVal[i];
                }
            }

            //add other decimal to total decimal
                //check if it is a positive or negative number
            if(other.decimal()>0){
                if(~((other.decimal()&bitVal[i])=0)){
                    let decimalTotal = decimalTotal + decVal[i];
                }
            }else{
                if(~((other.decimal()&bitVal[i])=0)){
                    let decimalTotal = decimalTotal - decVal[i];
                }
            }

            let i = i + 1;
        }

        //calc new value for whole if carrying/borrowing is needed
        if(decimalTotal>10000){ //carry
            let decimalTotal = decimalTotal - 10000;
            let whole = whole + 1;
        }else{                  //borrow
            if(decimalTotal<0){
                let decimalTotal = decimalTotal + 10000;
                let whole = whole - 1;
            }
        }

        //calc new decimal representation in binary
        let decimal = 0;
        let i = 0;
        while(i<14){
            if(decimalTotal>0){//positive decimal
                if(~(decimalTotal<decVal[i])){
                    let decimalTotal = decimalTotal - decVal[i];
                    let decimal = decimal + bitVal[i];
                }
            }else{//negative decimal
                if(~((-decimalTotal)<decVal[i])){
                    let decimalTotal = decimalTotal + decVal[i];
                    let decimal = decimal - bitVal[i];
                }
            }

            let i = i + 1;
        }

        //whole number part is ezpz
        let whole = whole + other.whole();

        return;

    }

    //subtract another double from this double
    method void subtractDouble(Double other){

        var int decimalTotal;
        var int i;

        //originate decimal count to .0000
        let decimalTotal = 0;

        //add decimal values of binary decimals together
        let i = 0;
        while(i<14){

            //add this decimal to total decimal
                //check if it is a positive or negative number
            if(decimal>0){
                if(~((decimal&bitVal[i])=0)){
                    let decimalTotal = decimalTotal + decVal[i];
                }
            }else{
                if(~((decimal&bitVal[i])=0)){
                    let decimalTotal = decimalTotal - decVal[i];
                }
            }

            //subtract other decimal from total decimal
                //check if it is a positive or negative number
            if(other.decimal()>0){
                if(~((other.decimal()&bitVal[i])=0)){
                    let decimalTotal = decimalTotal - decVal[i];
                }
            }else{
                if(~((other.decimal()&bitVal[i])=0)){
                    let decimalTotal = decimalTotal + decVal[i];
                }
            }

            let i = i + 1;
        }

        //calc new value for whole if carrying/borrowing is needed
        if(decimalTotal>10000){ //carry
            let decimalTotal = decimalTotal - 10000;
            let whole = whole + 1;
        }else{                  //borrow
            if(decimalTotal<0){
                let decimalTotal = decimalTotal + 10000;
                let whole = whole - 1;
            }
        }

        //calc new decimal representation in binary
        let decimal = 0;
        let i = 0;
        while(i<14){
            if(decimalTotal>0){//positive decimal
                if(~(decimalTotal<decVal[i])){
                    let decimalTotal = decimalTotal - decVal[i];
                    let decimal = decimal + bitVal[i];
                }
            }else{//negative decimal
                if(~((-decimalTotal)<decVal[i])){
                    let decimalTotal = decimalTotal + decVal[i];
                    let decimal = decimal - bitVal[i];
                }
            }

            let i = i + 1;
        }

        //whole number part is ezpz
        let whole = whole + other.whole();

        return;

    }

    //TODO implement mult
    //multiply this double by another

    //TODO implement divide
    //divide this double by another double

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~OUTPUT~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    //toString, basically
    method String str(){

        var String str;
        var String strDec;
        var int decimalTotal;
        var int i;
        var int j;


        //init whole string portion
        let str = String.new(11);
        do str.setInt(whole);

        //add decimal values of binary decimals together
        let i = 0;
        while(i<14){
            //add this decimal to total decimal
            if(~((decimal&bitVal[i])=0)){
                let decimalTotal = decimalTotal + decVal[i];
            }
            let i = i + 1;
        }

        //init dec string portion
        let strDec = String.new(4);
        do strDec.setInt(decimalTotal);

        //determine left-padding of 0's
        if(~(decimalTotal<1000)){
            let j = 0;
        }else{
            if(~(decimalTotal<100)){
                let j = 1;
                do strDec.appendChar(48);
            }else{
                if(~(decimalTotal<10)){
                    let j = 2;
                    do strDec.appendChar(48);
                    do strDec.appendChar(48);
                }else{
                    if(~(decimalTotal<1)){
                        let j = 3;
                        do strDec.appendChar(48);
                        do strDec.appendChar(48);
                        do strDec.appendChar(48);
                    }else{
                        let j = 0;
                    }
                }
            }
        }

        //pre-pend 0's
        let i = 0;
        while(i<j){
            do strDec.setCharAt(3,strDec.charAt(2));
            do strDec.setCharAt(2,strDec.charAt(1));
            do strDec.setCharAt(1,strDec.charAt(0));
            do strDec.setCharAt(i,48);
            let i = i + 1;
        }

        //check if there is any decimal
        if(decimalTotal=0){
            let j = 0;
        }else{
            //append '.'
            do str.appendChar(46);
            //determine how to trim trailing 0's
            while(~(decimalTotal<1000)){
                let decimalTotal = decimalTotal - 1000;
            }
            if(decimalTotal=0){
                let j = 1;
            }else{
                while(~(decimalTotal<100)){
                    let decimalTotal = decimalTotal - 100;
                }
                if(decimalTotal=0){
                    let j = 2;
                }else{
                    while(~(decimalTotal<10)){
                        let decimalTotal = decimalTotal - 10;
                    }
                    if(decimalTotal=0){
                        let j = 3;
                    }else{
                        let j = 4;
                    }
                }
            }
        }

        //append decimal chars
        let i = 0;
        while(i<j){
            do str.appendChar(strDec.charAt(i));
            let i = i + 1;
        }

        return str;

    }

}