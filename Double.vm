function Double.init 0
push constant 16
call Array.new 1
pop static 0
push constant 0
push static 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 0
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 0
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 0
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push static 0
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push static 0
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push static 0
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push static 0
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push static 0
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push static 0
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push static 0
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push static 0
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push static 0
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push static 0
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push static 0
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 15
push static 0
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 16
call Array.new 1
pop static 1
push constant 0
push static 1
add
push constant 5000
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 1
add
push constant 2500
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 1
add
push constant 1250
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 1
add
push constant 625
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push static 1
add
push constant 313
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push static 1
add
push constant 156
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push static 1
add
push constant 78
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push static 1
add
push constant 39
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push static 1
add
push constant 19
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push static 1
add
push constant 10
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push static 1
add
push constant 5
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push static 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push static 1
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push static 1
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push static 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 15
push static 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Double.new 0
push constant 2
call Memory.alloc 1
pop pointer 0
push constant 0
pop this 0
push constant 0
pop this 1
push pointer 0
return
function Double.dispose 0
push argument 0
pop pointer 0
push constant 0
return
function Double.whole 0
push argument 0
pop pointer 0
push this 0
return
function Double.decimal 0
push argument 0
pop pointer 0
push this 1
return
function Double.zero 0
push argument 0
pop pointer 0
push constant 0
pop this 0
push constant 0
pop this 1
push constant 0
return
function Double.addInt 0
push argument 0
pop pointer 0
push this 0
push argument 1
add
pop this 0
push constant 0
return
function Double.subtractInt 0
push argument 0
pop pointer 0
push this 0
push argument 1
sub
pop this 0
push constant 0
return
function Double.multInt 3
push argument 0
pop pointer 0
push constant 0
pop local 2
push constant 1
pop local 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 14
lt
not
if-goto WHILE_END0
push local 1
push constant 2
call Math.multiply 2
pop local 1
push this 1
push local 0
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push argument 1
push local 1
call Math.divide 2
add
pop local 2
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 2
push argument 1
push this 0
call Math.multiply 2
add
pop local 2
push local 2
pop this 0
push constant 0
pop this 1
push constant 0
return
function Double.divideInt 4
push argument 0
pop pointer 0
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 32767
pop this 0
push constant 32767
pop this 1
push constant 0
return
label IF_FALSE0
push constant 0
pop local 0
push this 0
push constant 0
lt
push this 1
or
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 0
not
push constant 1
add
pop this 0
push constant 0
not
pop local 3
goto IF_END1
label IF_FALSE1
push constant 0
pop local 3
label IF_END1
push argument 1
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
not
push constant 1
add
pop argument 1
push local 3
not
pop local 3
label IF_FALSE2
push constant 14
pop local 2
label WHILE_EXP0
push local 2
push constant 0
lt
not
not
if-goto WHILE_END0
push local 0
push constant 2
call Math.multiply 2
pop local 0
push this 0
push local 2
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 0
push constant 1
add
pop local 0
label IF_FALSE3
push local 0
push argument 1
lt
not
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 0
push argument 1
sub
pop local 0
push local 1
push local 2
push static 0
add
pop pointer 1
push that 0
add
pop local 1
label IF_FALSE4
push local 2
push constant 1
sub
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 3
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 1
not
push constant 1
add
pop local 1
label IF_FALSE5
push local 1
pop this 0
push constant 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP1
push local 2
push constant 14
lt
not
if-goto WHILE_END1
push local 0
push constant 2
call Math.multiply 2
pop local 0
push this 1
push local 2
push static 1
add
pop pointer 1
push that 0
and
push constant 0
eq
not
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 0
push constant 1
add
pop local 0
label IF_FALSE6
push local 0
push argument 1
lt
not
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push local 0
push argument 1
sub
pop local 0
push local 1
push local 2
push static 0
add
pop pointer 1
push that 0
add
pop local 1
label IF_FALSE7
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 3
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push local 1
not
push constant 1
add
pop local 1
label IF_FALSE8
push local 1
pop this 1
push constant 0
return
function Double.addDouble 2
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push constant 14
lt
not
if-goto WHILE_END0
push this 1
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 1
push local 1
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
add
pop local 0
label IF_FALSE1
goto IF_END0
label IF_FALSE0
push this 1
push local 1
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
sub
pop local 0
label IF_FALSE2
label IF_END0
push argument 1
call Double.decimal 1
push constant 0
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 1
call Double.decimal 1
push local 1
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
add
pop local 0
label IF_FALSE4
goto IF_END3
label IF_FALSE3
push argument 1
call Double.decimal 1
push local 1
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
sub
pop local 0
label IF_FALSE5
label IF_END3
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
push constant 10000
gt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 0
push constant 10000
sub
pop local 0
push this 0
push constant 1
add
pop this 0
goto IF_END6
label IF_FALSE6
push local 0
push constant 0
lt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push local 0
push constant 10000
add
pop local 0
push this 0
push constant 1
sub
pop this 0
label IF_FALSE7
label IF_END6
push constant 0
pop this 1
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push constant 14
lt
not
if-goto WHILE_END1
push local 0
push constant 0
gt
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
lt
not
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
sub
pop local 0
push this 1
push local 1
push static 0
add
pop pointer 1
push that 0
add
pop this 1
label IF_FALSE9
goto IF_END8
label IF_FALSE8
push local 0
neg
push local 1
push static 1
add
pop pointer 1
push that 0
lt
not
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
add
pop local 0
push this 1
push local 1
push static 0
add
pop pointer 1
push that 0
sub
pop this 1
label IF_FALSE10
label IF_END8
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push this 0
push argument 1
call Double.whole 1
add
pop this 0
push constant 0
return
function Double.subtractDouble 2
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push constant 14
lt
not
if-goto WHILE_END0
push this 1
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 1
push local 1
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
add
pop local 0
label IF_FALSE1
goto IF_END0
label IF_FALSE0
push this 1
push local 1
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
sub
pop local 0
label IF_FALSE2
label IF_END0
push argument 1
call Double.decimal 1
push constant 0
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 1
call Double.decimal 1
push local 1
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
sub
pop local 0
label IF_FALSE4
goto IF_END3
label IF_FALSE3
push argument 1
call Double.decimal 1
push local 1
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
add
pop local 0
label IF_FALSE5
label IF_END3
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
push constant 10000
gt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 0
push constant 10000
sub
pop local 0
push this 0
push constant 1
add
pop this 0
goto IF_END6
label IF_FALSE6
push local 0
push constant 0
lt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push local 0
push constant 10000
add
pop local 0
push this 0
push constant 1
sub
pop this 0
label IF_FALSE7
label IF_END6
push constant 0
pop this 1
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push constant 14
lt
not
if-goto WHILE_END1
push local 0
push constant 0
gt
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
lt
not
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
sub
pop local 0
push this 1
push local 1
push static 0
add
pop pointer 1
push that 0
add
pop this 1
label IF_FALSE9
goto IF_END8
label IF_FALSE8
push local 0
neg
push local 1
push static 1
add
pop pointer 1
push that 0
lt
not
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
add
pop local 0
push this 1
push local 1
push static 0
add
pop pointer 1
push that 0
sub
pop this 1
label IF_FALSE10
label IF_END8
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push this 0
push argument 1
call Double.whole 1
add
pop this 0
push constant 0
return
function Double.str 5
push argument 0
pop pointer 0
push constant 11
call String.new 1
pop local 0
push local 0
push this 0
call String.setInt 2
pop temp 0
push constant 0
pop local 3
label WHILE_EXP0
push local 3
push constant 14
lt
not
if-goto WHILE_END0
push this 1
push local 3
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push local 3
push static 1
add
pop pointer 1
push that 0
add
pop local 2
label IF_FALSE0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push constant 4
call String.new 1
pop local 1
push local 1
push local 2
call String.setInt 2
pop temp 0
push local 2
push constant 1000
lt
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
pop local 4
goto IF_END1
label IF_FALSE1
push local 2
push constant 100
lt
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 1
pop local 4
push local 1
push constant 48
call String.appendChar 2
pop temp 0
goto IF_END2
label IF_FALSE2
push local 2
push constant 10
lt
not
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 2
pop local 4
push local 1
push constant 48
call String.appendChar 2
pop temp 0
push local 1
push constant 48
call String.appendChar 2
pop temp 0
goto IF_END3
label IF_FALSE3
push local 2
push constant 1
lt
not
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 3
pop local 4
push local 1
push constant 48
call String.appendChar 2
pop temp 0
push local 1
push constant 48
call String.appendChar 2
pop temp 0
push local 1
push constant 48
call String.appendChar 2
pop temp 0
goto IF_END4
label IF_FALSE4
push constant 0
pop local 4
label IF_END4
label IF_END3
label IF_END2
label IF_END1
push constant 0
pop local 3
label WHILE_EXP1
push local 3
push local 4
lt
not
if-goto WHILE_END1
push local 1
push constant 3
push local 1
push constant 2
call String.charAt 2
call String.setCharAt 3
pop temp 0
push local 1
push constant 2
push local 1
push constant 1
call String.charAt 2
call String.setCharAt 3
pop temp 0
push local 1
push constant 1
push local 1
push constant 0
call String.charAt 2
call String.setCharAt 3
pop temp 0
push local 1
push local 3
push constant 48
call String.setCharAt 3
pop temp 0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP1
label WHILE_END1
push local 2
push constant 0
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
pop local 4
goto IF_END5
label IF_FALSE5
push local 0
push constant 46
call String.appendChar 2
pop temp 0
label WHILE_EXP2
push local 2
push constant 1000
lt
not
not
if-goto WHILE_END2
push local 2
push constant 1000
sub
pop local 2
goto WHILE_EXP2
label WHILE_END2
push local 2
push constant 0
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 1
pop local 4
goto IF_END6
label IF_FALSE6
label WHILE_EXP3
push local 2
push constant 100
lt
not
not
if-goto WHILE_END3
push local 2
push constant 100
sub
pop local 2
goto WHILE_EXP3
label WHILE_END3
push local 2
push constant 0
eq
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 2
pop local 4
goto IF_END7
label IF_FALSE7
label WHILE_EXP4
push local 2
push constant 10
lt
not
not
if-goto WHILE_END4
push local 2
push constant 10
sub
pop local 2
goto WHILE_EXP4
label WHILE_END4
push local 2
push constant 0
eq
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 3
pop local 4
goto IF_END8
label IF_FALSE8
push constant 4
pop local 4
label IF_END8
label IF_END7
label IF_END6
label IF_END5
push constant 0
pop local 3
label WHILE_EXP5
push local 3
push local 4
lt
not
if-goto WHILE_END5
push local 0
push local 1
push local 3
call String.charAt 2
call String.appendChar 2
pop temp 0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP5
label WHILE_END5
push local 0
return
