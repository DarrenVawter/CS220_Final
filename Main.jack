class Main{

/*
 *
 *  This program
 *
**/
    function void main(){

        //declare all vars
        var Double PI;          //approximated value of PI (333/106) used for demo of Double class only
        var Double hD;          //height of the sin curve at the current index/x value
        var Double index;       //true 'index' of current sin value
        var Array sinVals;      //array of approximated sin values*10000
        var int uIndex;         //upper index of sin value array of current actual sin value
        var int lIndex;         //lower index of sin value array of current actual sin value
        var int i;              //counter that binds current draw position between 0 and 511
        var int x;              //counter that counts with i but only resets when @ int max (used for calculating height of sin curve)
        var int freq;           //relative frequency of sin curve
        var int density;        //spacing between lines of sin curve (used to draw multiple waves at once)
        var boolean keyWaiting; //used to ensure only 1 key press is detected at a time

        //init other classes
        do Double.init();

        //init object(s)
            //approximation for pi is used for demonstration of the Double class -> not in calculating any sin values
        let PI = Double.new();
        do PI.addInt(333);
        do PI.divideInt(106);

            //double used to store height (once it has been calculated)
        let hD = Double.new();

            //'index' of the sin value array to access
                //whole number of this double is the lower index
                //whole number+1 is the upper index
                //decimal is the % weight to give the upper index when linearly interpolating between the two
        let index = Double.new();

            //list of approximated sin values*10000
                //these vals are decimal shifted left 4 places (*10000) to increase precision
                    //shifting more than 4 places would result in integer overflow
        let sinVals = Array.new(64);
        let sinVals[0]  = 0;
        let sinVals[1]  = 980;
        let sinVals[2]  = 1951;
        let sinVals[3]  = 2903;
        let sinVals[4]  = 3827;
        let sinVals[5]  = 4714;
        let sinVals[6]  = 5556;
        let sinVals[7]  = 6344;
        let sinVals[8]  = 7071;
        let sinVals[9]  = 7730;
        let sinVals[10]  = 8315;
        let sinVals[11]  = 8819;
        let sinVals[12]  = 9239;
        let sinVals[13]  = 9569;
        let sinVals[14]  = 9808;
        let sinVals[15]  = 9952;
        let sinVals[16]  = 10000;
        let sinVals[17]  = 9952;
        let sinVals[18]  = 9808;
        let sinVals[19]  = 9569;
        let sinVals[20] = 9239;
        let sinVals[21] = 8819;
        let sinVals[22] = 8315;
        let sinVals[23] = 7730;
        let sinVals[24] = 7071;
        let sinVals[25] = 6344;
        let sinVals[26] = 5556;
        let sinVals[27] = 4714;
        let sinVals[28] = 3827;
        let sinVals[29] = 2903;
        let sinVals[30] = 1951;
        let sinVals[31] = 980;
        let sinVals[32] = 0;
        let sinVals[33] = -980;
        let sinVals[34] = -1951;
        let sinVals[35] = -2903;
        let sinVals[36] = -3827;
        let sinVals[37] = -4714;
        let sinVals[38] = -5556;
        let sinVals[39] = -6344;
        let sinVals[40] = -7071;
        let sinVals[41] = -7730;
        let sinVals[42] = -8315;
        let sinVals[43] = - 8819;
        let sinVals[44] = -9239;
        let sinVals[45] = - 9569;
        let sinVals[46] = -9808;
        let sinVals[47] = - 9952;
        let sinVals[48] = -10000;
        let sinVals[49] = - 9952;
        let sinVals[50] = -9808;
        let sinVals[51] = - 9569;
        let sinVals[52] = -9239;
        let sinVals[53] = -8819;
        let sinVals[54] = -8315;
        let sinVals[55] = -7730;
        let sinVals[56] = -7071;
        let sinVals[57] = -6344;
        let sinVals[58] = -5556;
        let sinVals[59] = -4714;
        let sinVals[60] = -3827;
        let sinVals[61] = -2903;
        let sinVals[62] = -1951;
        let sinVals[63] = -980;

        //init vars
        let density = 1;
        let keyWaiting = true;

        //DEMONSTRATION OF PSEUDO-DOUBLE CLASS
        do Output.printString("Pi (as a pseudo-double): ");
        do Output.printString(PI.str());
        do Output.println();
        do Output.println();

        //prompt instructions
        do Output.printString("Welcome to the sine wave generator.");
        do Output.println();
        do Output.println();
        do Output.printString("Controls:");
        do Output.println();
        do Output.printString("Increase Wavelength/Decrease Frequency-->Down arrow key");
        do Output.println();
        do Output.printString("Decrease Wavelength/Increase Frequency-->Up arrow key");
        do Output.println();
        do Output.printString("Increase Wave Density-->Left arrow key");
        do Output.println();
        do Output.printString("Decrease Wave Density-->Right arrow key");
        do Output.println();
        do Output.printString("Quit->esc");
        do Output.println();
        do Output.println();
        //read in freq
        let freq = Keyboard.readInt("Press a number to select an initial frequency...");

        //begin processing
        while(~(Keyboard.keyPressed()=140)){

            let i = 0;
            while(i<512){

                //only allow presses of up or down arrows, not holding
                if( keyWaiting ){
                    if(Keyboard.keyPressed()=131){
                        let keyWaiting = false;
                        let freq = freq - 1;
                        if(freq < 0){
                            let freq = 0;
                        }
                    }else{if(Keyboard.keyPressed()=133){
                        let keyWaiting = false;
                        let freq = freq + 1;
                        if(freq > 16){
                            let freq = 16;
                        }
                    }}

                }else{

                    if(Keyboard.keyPressed()=0){
                        let keyWaiting = true;
                    }

                }

                //only allow presses of left or right arrows, not holding
                if( keyWaiting ){
                    if(Keyboard.keyPressed()=130){
                        let keyWaiting = false;
                        let density = density - 1;
                        if(density < 1){
                            let density = 1;
                        }
                    }else{if(Keyboard.keyPressed()=132){
                        let keyWaiting = false;
                        let density = density + 1;
                        if(density > 10){
                            let density = 10;
                        }
                    }}

                }else{

                    if(Keyboard.keyPressed()=0){
                        let keyWaiting = true;
                    }

                }

                //calc sinVal index
                do index.zero();
                do index.addInt(x);
                do index.divideInt(freq);//freq modulation

                //get sin value indices
                let lIndex = (index.whole() & 63);
                let uIndex = (index.whole()+1 & 63);

                //interpolate between indices
                do index.subtractInt(index.whole());
                do index.multInt(sinVals[uIndex]-sinVals[lIndex]);
                do index.addInt(sinVals[lIndex]);
                if( ~( (index.decimal()&1) = 0 ) ){
                    do index.addInt(1);
                }
                // hD=0;
                do hD.zero();

                // hD+=sinVal[index]
                do hD.addInt(index.whole());

                // hD/=80
                do hD.divideInt(80);

                // hD+=127
                do hD.addInt(127);

                // if(h_dec>=.5)
                    //(choosing closest int at this point, as we cannot shade part of a pixel)
                if( ~( (hD.decimal()&1) = 0 ) ){
                    do hD.addInt(1);
                }


                //erase
                do Screen.setColor(false);
                do Screen.drawLine(i,0,i,255);
                //draw
                do Screen.setColor(true);
                do Screen.drawLine(i,0,i,hD.whole());

                //cap x
                if(x > 32766 | x<0){
                    let x = -density;
                }
                //x+=density
                let x = x + density;

                //i+=density
                let i = i + density;
            }

        }

        //dispose all objects
        do PI.dispose();
        do hD.dispose();
        do index.dispose();
        do sinVals.dispose();

        return;

    }

}